call plug#begin('~/.vim/plugged')
	Plug 'easymotion/vim-easymotion'
	Plug 'preservim/nerdtree', {'on': 'NERDTreeToggle'}
	Plug 'preservim/nerdcommenter'
	Plug 'ap/vim-css-color'
	Plug 'preservim/tagbar'
	Plug 'prettier/vim-prettier'
	Plug 'neoclide/coc.nvim', {'branch': 'master'}
	Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
	Plug 'puremourning/vimspector'
	Plug 'francoiscabrol/ranger.vim'
	Plug 'rbgrouleff/bclose.vim'

	Plug 'godlygeek/tabular'
	Plug 'preservim/vim-markdown'
	"Plug 'mg979/vim-visual-multi'
	"Plug 'https://github.com/nvim-tree/nvim-tree.lua'
	"Plug 'jackMort/ChatGPT.nvim'
	"Plug 'yuezk/vim-js'
	"Plug 'maxmellon/vim-jsx-pretty'
	"Plug 'jiangmiao/auto-pairs'
	"Plug 'mattn/emmet-vim'
	"Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
	"Plug 'neovim/nvim-lspconfig'
	"Plug 'hrsh7th/nvim-cmp'
	"Plug 'hrsh7th/cmp-nvim-lsp'
	"Plug 'saadparwaiz1/cmp_luasnip'
	"Plug 'L3MON4D3/LuaSnip'
call plug#end()

"set number
"set colorcolumn=79
set encoding=utf-8
set noswapfile
set scrolloff=7
set autoindent
set fileformat=unix
set expandtab tabstop=4 shiftwidth=4 softtabstop=4
set mouse=a
set gdefault
set guifont=Source\ Code\ Pro\ for\ Powerline:h15:cANSI
set hlsearch
set ignorecase
set incsearch
set list listchars=tab:\ \ ,trail:_,precedes:-,extends:-
"set showbreak=\\
set noexpandtab
set smartcase
set statusline=
set statusline+=%#StatusLine#
set statusline+=%f\ 
set statusline+=%m\ 
set statusline+=%=%r%=
set statusline+=\ %y
set statusline+=\ %l:%c/%L
set fillchars+=vert:\|
"set fillchars+=vert:\|,stlnc:-
set nofoldenable
set foldlevel=99
set cmdheight=0
"set statusline+=%#PmenuSel#
"set statusline+=%#CursorColumn#
"set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
"set statusline+=\[%{&fileformat}\]
au BufNewFile,BufRead *.md set conceallevel=2
let g:vim_markdown_edit_url_in = 'tab'
"au BufNewFile,BufRead *.md hi AsteriskBold ctermfg=Magenta cterm=bold
"au BufNewFile,BufRead *.md syn match Asterisks contained "**" conceal
"au BufNewFile,BufRead *.md syn match AsteriskBold "\*\*.*\*\*" contains=Asterisks

filetype indent on
syntax on

set completeopt-=preview

map <M-1> 1gt
map <M-2> 2gt
map <M-3> 3gt
map <M-4> 4gt
map <M-5> 5gt

hi Comment ctermfg=darkred
hi TabLineFill ctermfg=none ctermbg=none cterm=none
hi TabLine ctermfg=cyan ctermbg=none cterm=none
hi TabLineSel ctermfg=cyan cterm=underline
hi StatusLine ctermbg=none cterm=bold
hi VertSplit cterm=none
hi Pmenu ctermfg=13 ctermbg=black
hi PmenuThumb ctermbg=23
hi PmenuSbar ctermbg=black
hi PmenuSel ctermfg=black ctermbg=cyan
hi SignColumn ctermbg=none
hi CocInlayHint ctermfg=8
hi CocGitAddedSign ctermbg=none ctermfg=green
hi CocGitChangeRemovedSign ctermbg=none ctermfg=magenta
hi CocGitChangedSign ctermbg=none ctermfg=magenta
hi CocGitRemovedSign ctermbg=none ctermfg=red
hi CocGitTopRemovedSign ctermbg=none ctermfg=magenta
hi Folded ctermbg=17
hi FoldColumn ctermbg=0
hi MatchParen cterm=bold ctermbg=none ctermbg=darkmagenta
"hi StatusLine ctermfg=16 ctermbg=Cyan

map ; :
map <C-t> :RangerNewTab<CR>
nmap <C-tab> :NERDTreeToggle<CR>
map <C-/> <Plug>NERDCommenterToggle
let NERDTreeShowHidden=1
let g:EasyMotion_smartcase = 1
let g:vimspector_enable_mappings = 'HUMAN'
map <Space> <Plug>(easymotion-bd-f)
nmap <Space> <Plug>(easymotion-overwin-f)
"let user_emmet_mode = 'in'
"imap <C-y> <Plug>(emmet-expand-abbr)
nnoremap <CR> :noh<CR><CR>
nnoremap <Space><Space><Space> :nohlsearch<CR>
inoremap jk <esc>
nnoremap <S-u> :redo<CR>
nnoremap ZZ :q!<cr>
nnoremap ZW :wq<cr>

"hide dos ^M
"match Ignore /\r$/

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> gh :call <SID>show_documentation()<CR>
inoremap <silent><expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : <SID>check_back_space() ? "\<Tab>" : coc#refresh()
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

augroup vimrc
  au BufReadPre * setlocal foldmethod=indent
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
	execute 'h '.expand('<cword>')
  else
	call CocAction('doHover')
  endif
endfunction

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

